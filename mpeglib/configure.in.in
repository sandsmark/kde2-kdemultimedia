dnl ***** end of KDE specific configure things *********
dnl [START]   for mpeglib checks


THIS_LIB_MAJOR_VERSION=0
THIS_LIB_MINOR_VERSION=3
THIS_LIB_MICRO_VERSION=0
THIS_LIB_NAME=mpeglib
THIS_LIB_VERSION=$THIS_LIB_MAJOR_VERSION.$THIS_LIB_MINOR_VERSION.$THIS_LIB_MICRO_VERSION

AC_SUBST(THIS_LIB_MAJOR_VERSION)
AC_SUBST(THIS_LIB_MINOR_VERSION)
AC_SUBST(THIS_LIB_MICRO_VERSION)
AC_SUBST(THIS_LIB_VERSION)
AC_SUBST(THIS_LIB_NAME)
dnl this does not work, but to have no errors we subst it



dnl Checks for header files.
AC_CHECK_HEADERS(pthread.h pthread/mit/pthread.h)
AC_CHECK_HEADERS(sys/soundcard.h machine/soundcard.h linux/soundcard.h)


AC_C_BIGENDIAN




dnl AC_C_ATTRIBUTE_ALIGNED
dnl define ATTRIBUTE_ALIGNED_MAX to the maximum alignment if this is supported
AC_DEFUN([AC_C_ATTRIBUTE_ALIGNED],
    [AC_CACHE_CHECK([__attribute__ ((aligned ())) support],
	[ac_cv_c_attribute_aligned],
	[ac_cv_c_attribute_aligned=0
	for ac_cv_c_attr_align_try in 2 4 8 16 32 64; do
	    AC_TRY_COMPILE([],
		[static char c __attribute__ ((aligned($ac_cv_c_attr_align_try))) = 0; return c;],
		[ac_cv_c_attribute_aligned=$ac_cv_c_attr_align_try])
	done])
    if test x"$ac_cv_c_attribute_aligned" != x"0"; then
	AC_DEFINE_UNQUOTED([ATTRIBUTE_ALIGNED_MAX],
	    [$ac_cv_c_attribute_aligned],[maximum supported data alignment])
    fi])

AC_C_ATTRIBUTE_ALIGNED





X11_VIDEO_LIB="libutilx11.la"
DISPLAY_VIDEO_DIR="util/render/x11/*.lo"
SDL_VIDEO_LIB=""
SDLLIB=""

AC_ARG_ENABLE( x11,
[  --disable-x11  do not build x11 and enable SDL output system [default=no]],
     disable_x11="yes",
     disable_x11="no")

case "$disable_x11" in
  yes)
    X11_VIDEO_LIB=""
    SDL_VIDEO_LIB="libutilsdl.la"
    SDLLIB="-lSDL"
    DISPLAY_VIDEO_DIR="util/render/sdl/*.lo"
    AC_DEFINE(SDL_WRAPPER,1,[Defined if using the SDL wrapper])
    ;;

  *)
    ;;
esac
AC_SUBST(X11_VIDEO_LIB)
AC_SUBST(SDL_VIDEO_LIB)
AC_SUBST(DISPLAY_VIDEO_DIR)


AC_MSG_CHECKING(for X11 shared mem extension)
x11_shared_mem=no
AC_TRY_COMPILE([
                #include <X11/Xlib.h>
                #include <X11/extensions/XShm.h>
                #include <sys/ipc.h>
                #include <sys/shm.h>
                ],[
                ],[
                x11_shared_mem=yes
                ])
AC_MSG_RESULT($x11_shared_mem)
if test x$x11_shared_mem = xyes; then
   AC_DEFINE(X11_SHARED_MEM,1,[Define if you have X11 shared mem])
fi


AC_MSG_CHECKING(for X11 DGA2.0 extension)
x11_dga2=no
AC_TRY_COMPILE([
                #include <X11/Xlib.h>
                #include <X11/extensions/xf86dga1.h>
                ],[
                ],[
                x11_dga2=yes
                ])
AC_MSG_RESULT($x11_dga2)
if test x$x11_dga2 = xyes; then
   AC_DEFINE(X11_DGA2,1,[Define if you have XFree4.0 DGA 2.0])
   DGALIBS="-lXxf86dga"
fi

AC_MSG_CHECKING(for X11 video extension)
x11_xv=no
AC_TRY_COMPILE([
                #include <X11/Xlib.h>
                #include <X11/extensions/Xvlib.h>
                ],[
                ],[
                x11_xv=yes
                ])
AC_MSG_RESULT($x11_xv)
if test x$x11_xv = xyes; then
   AC_DEFINE(X11_XV,1,[Define if you have XFree4.0 XV extension])
   XVLIBS="-lXv"
fi

AC_MSG_CHECKING(for X11 videomode extension)
x11_xvidmode=no
AC_TRY_COMPILE([
                #include <X11/Xlib.h>
                #include <X11/extensions/xf86vmode.h>
                ],[
                ],[
                x11_xvidmode=yes
                ])
AC_MSG_RESULT($x11_xvidmode)
if test x$x11_xvidmode = xyes; then
   AC_DEFINE(X11_XVIDMODE,1,[Define if you have XVidModeextension])
   XVIDMODELIBS="-lXxf86vm"
fi


dnl
dnl if we do an SDL build we remove now all determined X11 dependencies
dnl

X11_LIBS="-lX11 -lXext"

if test x$disable_x11 = xyes; then
   DGALIBS=""
   XVLIBS=""
   X11_LIBS=""
fi


dnl ok now the _make splay fast switch_ 

AC_ARG_ENABLE( sleep,
[  --disable-sleep  give full cpu priority to mp3 decoder [default=no]],,
                disable_sleep="no")

case "$disable_sleep" in
  no)
    AC_DEFINE(PTHREADEDMPEG,1,[Define for full cpu priority to mp3 decoder])    
    ;;

  *)
    ;;
esac

CDDALIBS=""
AC_MSG_CHECKING(for cdparanoia headers)
cdda_paranoia=no
AC_TRY_COMPILE([
		#include <sys/types.h> 
		typedef int16_t size16;
		typedef int32_t size32;
                #include <cdda_interface.h>
                #include <cdda_paranoia.h>
                ],[
                ],[
                cdda_paranoia=yes
                ])
dnl currently disabled
dnl cdda_paranoia=no
AC_MSG_RESULT($cdda_paranoia)
if test x$cdda_paranoia = xyes; then
   dnl we need the cdda_paranoia_lib because otherwise we override LIBS !
   AC_CHECK_LIB(cdda_paranoia,paranoia_init,cdda_paranoia_lib=yes,
                cdda_paranoia=no,[-lcdda_paranoia -lcdda_interface])
fi
if test x$cdda_paranoia = xyes; then
   AC_DEFINE(CDDA_PARANOIA,1,[Define if you have cdparanoia installed])
   CDDALIBS="-lcdda_paranoia -lcdda_interface"
fi


VORBISLIBS=""
AC_MSG_CHECKING(for ogg/vorbis headers)
ogg_vorbis=no
AC_TRY_COMPILE([
		#include <vorbis/codec.h>
		#include <vorbis/vorbisfile.h>
                ],[
                ],[
                ogg_vorbis=yes
                ])
AC_MSG_RESULT($ogg_vorbis)
if test x$ogg_vorbis = xyes; then
   dnl we need the ogg_vorbis_lib because otherwise we override LIBS !
   AC_CHECK_LIB(vorbisfile,ov_open,ogg_vorbis_lib=yes,
                ogg_vorbis=no,[-lvorbisfile -lvorbis -logg])
fi
if test x$ogg_vorbis = xyes; then
   AC_DEFINE(OGG_VORBIS,1,[Define if you have ogg/vorbis installed])
   OGG_VORBISLIBS="-lvorbisfile -lvorbis -logg"
fi


AC_MSG_CHECKING(checking OS)
AC_SUBST(OS_TYPE)
OS_TYPE=`uname -s`
AC_MSG_RESULT($OS_TYPE)

case "$ARCH_TYPE" in
  i?86)
    AC_MSG_RESULT([Found Intel enable MMX support])
    AC_DEFINE(INTEL,1,[Define if you have an INTEL and may have MMX])
    ;; 

  *)
    AC_MSG_RESULT([Non Intel.])
    ;;
esac

dnl disable everything which is not supported
kde_mpeglib_compiles=no

case "$OS_TYPE" in
dnl  FreeBSD)
dnl    kde_mpeglib_compiles=yes
dnl    ;;
  Linux)
    kde_mpeglib_compiles=yes
    ;;
  AIX)
    kde_mpeglib_compiles=yes
    ;;
  SunOs)
    kde_mpeglib_compiles=yes
    ;;
  *)
    AC_MSG_RESULT([*** We disable mpeglib for this platform ***])
    DO_NOT_COMPILE="$DO_NOT_COMPILE mpeglib mpeglib_artsplug"
    ;;
esac


LIBPTHREAD=""
case "$OS_TYPE" in
  AIX)
    AC_MSG_RESULT([AIX :Unknown hardware. You will have problems!!])
    AC_CHECK_LIB(pthread, pthread_create, [LIBPTHREAD="-lpthread"])
    AC_DEFINE(OS_AIX,1,[Define if you have AIX for sound])
    ;;

  Linux)
    AC_CHECK_LIB(pthread, pthread_create, [LIBPTHREAD="-lpthread"])
    AC_DEFINE(OS_Linux,1,[Define if you have linux pthread])
    ;;

  FreeBSD)
    OS_TYPE="BSD"
    AC_CHECK_LIB(c_r, pthread_create, [LIBPTHREAD="-lc_r"]) dnl name of pthread lib in FreeBSD
    AC_DEFINE(OS_BSD,1,[Define if you have BSD pthread in -lc_r])
    ;;

  BSD/OS)
    OS_TYPE="BSD"
    AC_CHECK_LIB(c, pthread_create, [LIBPTHREAD="-lc"]) dnl name of pthread lib in BSD/OS
    AC_DEFINE(OS_BSD,1,[Define if you have BSD pthread in -lc])
    ;;

  NetBSD)
    AC_MSG_RESULT([NetBSD :Unknown hardware. You will have problems!!])
    OS_TYPE="BSD"
    AC_DEFINE(OS_BSD,1,[Define if you have BSD pthread in -lc_r])
    ;;

  SunOS)
    OS_TYPE="SunOS"
    AC_CHECK_LIB(pthread, pthread_create, [LIBPTHREAD="-lpthread"])
    AC_DEFINE(OS_SunOS,1,[Define if you have solaris -lpthread]) 
    ;;

  IRIX)
    AC_MSG_RESULT([IRIX :Unknown hardware. You will have problems!!])
    AC_DEFINE(OS_IRIX,1,[Define if you have iris])
    ;;

  HPUX)
    AC_MSG_RESULT([HPUX :Unknown hardware. You will have problems!!])
    AC_DEFINE(OS_HPUX,1,[Define if you have HP_UX])
    ;;

  *)
    AC_MSG_RESULT([Very Unknown hardware. **Better give up!**])
    ;;

esac

THIS_LIB_LIBS="-lX11 -lXext -lm -lstdc++ ${XVLIBS} ${DGALIBS} "
THIS_LIB_LIBS="${THIS_LIB_LIBS} ${XVIDMODELIBS} ${SDLLIB} ${CDDALIBS} "
THIS_LIB_LIBS="${THIS_LIB_LIBS} ${OGG_VORBISLIBS} ${LIBPTHREAD}"
AC_SUBST(THIS_LIB_LIBS)
